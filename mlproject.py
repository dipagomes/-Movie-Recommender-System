# -*- coding: utf-8 -*-
"""Mlproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ki9HF0drwAB6UQKp28UF_nEEEGWdg_l0
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Data collection and preprocessor"""

from google.colab import drive
drive.mount('/content/drive')

"""Import the dependencies"""

#loading data to csv to panada frame
movies_data = pd.read_csv("/content/drive/MyDrive/ML Project/movies.csv", encoding='utf8', engine='python')

movies_data.head()

#number rows and colum od data set
movies_data.shape

#selecting relevent feautre for recomandations
selected_features =  ['genres', 'keywords', 'tagline', 'cast', 'director']
print(selected_features)

#repalcing null value with null string
for feautre in selected_features:
  movies_data[feautre] = movies_data[feautre].fillna('')

#combinig all the selected feature
combined_features = movies_data['genres']+ ' '+movies_data['keywords']+ ' '+movies_data['tagline']+ ' '+movies_data['cast']+ ' '+movies_data['director']

print(combined_features)

#converting data to text to feature vector
vectorizer = TfidfVectorizer()

feautre_vectors = vectorizer.fit_transform(combined_features)

print(feautre_vectors)

"""Cosine similarity Score"""

#getting simillarity score
simillarity = cosine_similarity(feautre_vectors)

print(simillarity)

print(simillarity.shape)

#getting the movie name from the user
movie_name = input("Enter your favourite Movie Name: ")

#creating a list with all the movie name given in the data set

list_of_alltitels = movies_data['title'].tolist()
print(list_of_alltitels)

#finding colest math movie name from the dataset

find_close_match = difflib.get_close_matches(movie_name,list_of_alltitels)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

#finding the indx with the titel
index_of_the_movie = movies_data[ movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

import enum
#getting a list of simmilar movies
simillarity_score = list(enumerate(simillarity[index_of_the_movie]))
print(simillarity_score)

len(simillarity_score)

#sort movie based on the silmilarity score

sorted_similar_movies = sorted(simillarity_score, key = lambda x:x[1], reverse = True)
print(sorted_similar_movies)

# print the name of similar movies based on the index

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1

"""Movie Recomandation system"""

movie_name = input("Enter your favourite Movie Name: ")

list_of_alltitels = movies_data['title'].tolist()
find_close_match = difflib.get_close_matches(movie_name,list_of_alltitels)
close_match = find_close_match[0]
index_of_the_movie = movies_data[ movies_data.title == close_match]['index'].values[0]
simillarity_score = list(enumerate(simillarity[index_of_the_movie]))
sorted_similar_movies = sorted(simillarity_score, key = lambda x:x[1], reverse = True)

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1